name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-dev:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/aspdotnetapp:latest .

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/aspdotnetapp:latest

    - name: Setup SSH for DEV
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEV_EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to AWS EC2 DEV
      env:
        DEV_EC2_HOST: ${{ secrets.DEV_EC2_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@$DEV_EC2_HOST << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/aspdotnetapp:latest
          sudo docker stop aspdotnetapp || true
          sudo docker rm aspdotnetapp || true
          sudo docker run -d --name aspdotnetapp -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/aspdotnetapp:latest
        EOF

  manual-approval-and-deploy-prod:
    runs-on: ubuntu-latest
    needs: build-and-deploy-dev
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Manual approval
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { payload } = github.context;
          const userResponse = await github.actions.createWorkflowDispatch({
            owner: payload.repository.owner.login,
            repo: payload.repository.name,
            workflow_id: 'build-and-deploy-prod.yml',
            ref: payload.ref,
            inputs: {
              approve: true
            }
          });

          console.log(userResponse);

    - name: Setup SSH for PROD
      if: inputs.approve == 'true'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PROD_EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to AWS EC2 PROD
      if: inputs.approve == 'true'
      env:
        PROD_EC2_HOST: ${{ secrets.PROD_EC2_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@$PROD_EC2_HOST << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/aspdotnetapp:latest
          sudo docker stop aspdotnetapp || true
          sudo docker rm aspdotnetapp || true
          sudo docker run -d --name aspdotnetapp -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/aspdotnetapp:latest
        EOF
